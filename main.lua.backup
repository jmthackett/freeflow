
require("compat53")
local luacs = require("luacs")
local xmlua = require("xmlua")
local https = require("ssl.https")
local lpeg = require("lpeg")
local re = require("re")
local InputField = require("InputField")
local sandbox = require("sandbox")
local inspect = require('inspect')
local urlParser = require("url")

function urlHelper(urlParsed, requestParsed)
  local helper = io.open("./www.theguardian.com.lua",r)
  local code = helper:read("*a")
  local env = {}
  table.insert(env, {urlParsed = urlParsed})
  table.insert(env, {requestParsed = requestParsed})
  sandbox.run(code, {}, {requestParsed = requestParsed, urlParsed = urlParsed})
  helper:close()
  return result
end

-- this probably needs to live within a callback that runs when we have focus on the input field and hit "enter"
local url = "https://www.theguardian.com/education/2023/jul/14/rishi-sunak-force-english-universities-cap-low-value-degrees"
--local field      = InputField(url)
local page, code, headers, status = https.request(url)
local requestParsed = xmlua.HTML.parse(page)
local urlParsed = urlParser.parse(url)
-- START SECTION TO REMOVE INTO A SEPARATE FILE
if urlParsed.path:match('(%d%d%d%d/%a%a%a/%d%d)') then
  -- grab the headline
  local headline = requestParsed:css_select('div [data-gu-name="headline"]')
  local headline = headline:css_select('h1')

  if headline == false then
    headline = "Headline not found"
  end

  -- grab the standfirst/subheading
  local standfirst = requestParsed:css_select('div [data-gu-name="standfirst"]')
  local standfirst = standfirst:css_select('p')

  -- grab the byline (as in, line denoting who the article is by!)
  local byline = requestParsed:css_select('[data-link-name="byline"]')
  local byline = byline:css_select('div')

  -- grab the content
  local content = requestParsed:css_select('div[id~="maincontent"]')
  local content = content:to_xml():gsub("<figure(.-)</figure>","") -- nuke everything inside the figure tag as it is newsletter begging
  local content = xmlua.XML.parse(content)
  local content = content:css_select('p') -- select only p tags
  local content = content:to_xml():gsub("<p(.-)>","\n"):gsub("</p>","\n") -- we're "rendering" with printf, so just replace paragraph tags with newlines

else
  print("URL didn't match regex")
end

-- END SECTION TO REMOVE

local x, y, w, h = love.window.getSafeArea( )

-- sane default margins
local padding_left = ((w / 100)*10)
local padding_right = w - ((w / 100)*10)

-- load the window and tell it we can resize it if we damn well please
function love.load()
	love.window.setMode(800, 600, {resizable=true, vsync=0, minwidth=400, minheight=300})
end

-- actually do the thing: tidy me
function love.draw()
  love.graphics.setBackgroundColor( 0,0,0, 0 )
  love.graphics.setColor(1, 1, 1, 1)
  love.graphics.printf(headline.."\n\n"..standfirst.."\n\n"..byline.."\n\n"..content, padding_left, 30, padding_right, "left")
end
